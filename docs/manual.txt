generate_uuid (3m_uuid) - [M_uuid] generate a UUID (Universally Unique IDentifier) string per RFC 4122 (LICENSE:BSD-4-Clause)
M_uuid (3m_uuid)     - [M_uuid::INTRO] a module of UUID (Universally Unique IDentifier) procedures (LICENSE:BSD-4-Clause)
unique (1m_uuid)     - [FUNIX] generate a UUID (Universally Unique ID) string per RFC 4122 (LICENSE:PD)
unique(1m_uuid) 					       unique(1m_uuid)

NAME
  unique(1f) - [FUNIX] generate a UUID (Universally Unique ID) string per RFC
  4122 (LICENSE:PD)

SYNOPSIS
  unique [[ --method] NAME][ -urn][ -repeat N]]|[ --help|--version]

DESCRIPTION
  unique(3f) generates UUID strings according to the RFC 4122 standard.

  A universally unique identifier (UUID) is a 128-bit number used to identify
  information in computer systems. When generated according to standard
  methods UUIDs are for practical purposes unique.

  Standard methods 0, 1 and 4 are supported as described in RFC 4122.

  UUID strings are particularly useful as keys for relational database
  entries, and for building unique temporary file names (especially in cross-
  mounted filesystems that more than one OS is utilizing).

OPTIONS
  --method NAME
    Select the UUID version type. Supported methods are nil|0, random|4,
    time|1.

    0.	Nil UUID (ie. ''00000000-0000-0000-0000-000000000000'')

    1.	time-based UUID

    2.	Not implemented

    3.	Not implemented

    4.	pseudo-RNG(Random Number Generator) based. The default

    5.	Not implemented

  --urn
    The output is prefixed with "urn:uuid:". This conforms to RFC 4122, which
    defines a Uniform Resource Name (URN) namespace for UUIDs.

  --repeat N
    Number of UUID strings to generate

  --help
    display this help and exit

  --version
    output version information and exit

EXAMPLES
  Sample commands

     unique
     4bb8051e-4af3-11e8-6603-4254ffee9a14

     unique --urn
     urn:uuid:e9fd7cab-69f2-4cd6-4b5e-d54b9fbf617a

     unique --method time --repeat 4
     f2a2faf0-833a-11e9-7373-5eb4cfd7e237
     f2a2faf0-833a-11e9-7373-afbb9f7b9100
     f2a2faf0-833a-11e9-7373-cde3ffff3681
     f2a2faf0-833a-11e9-7373-271cfbfd42bc

     unique --usage # show usage, including short names
     USAGE:
     Keyword  Short Present Value
     help	 h  F	     [F]
     method	 m  F	     ["4"]
     repeat	 r  F	     [1]
     urn	 U  F	     [F]
     usage	 u  T	     [T]
     verbose	 V  F	     [F]
     version	 v  F	     [F]

     unique -r 2 -m 1 -U
     urn:uuid:91c6a054-26df-11ee-5779-c946fe995111
     urn:uuid:91c6a054-26df-11ee-5779-62307afd65fd

AUTHOR
  John S. Urban

LICENSE
  Public Domain

			       February 23, 2025	       unique(1m_uuid)
M_uuid(3m_uuid) 					       M_uuid(3m_uuid)

NAME
  M_uuid(3f) - [M_uuid::INTRO] a module of UUID (Universally Unique
  IDentifier) procedures (LICENSE:BSD-4-Clause)

SYNOPSIS
  public entities:

       use M_uuid, only : generate_uuid
       !
       function generate_uuid(version) result(uuid)
       integer, intent(in), optional :: version
       character(len=36)	     :: uuid

DESCRIPTION
  Remember you are unique, just like everyone else.

  A universally unique identifier (UUID) is a 128-bit number used to identify
  information in computer systems.

  When generated according to the standard methods, UUIDs are for practical
  purposes unique, without depending for their uniqueness on a central
  registration authority or coordination between the parties generating them,
  unlike most other numbering schemes. While the probability that a UUID will
  be duplicated is not zero, it is close enough to zero to be negligible.

  Thus, anyone can create a UUID and use it to identify something with near
  certainty that the identifier does not duplicate one that has already been
  or will be created to identify something else. Information labeled with
  UUIDs by independent parties can therefore be later combined into a single
  database, or transmitted on the same channel, without needing to resolve
  conflicts between identifiers.

  Adoption of UUIDs and GUIDs is widespread. Many computing platforms provide
  support for generating them, and for parsing their textual representation.

  RFC 4122 defines a Uniform Resource Name (URN) namespace for UUIDs.  A UUID
  presented as a URN appears as follows:

	urn:uuid:123e4567-e89b-12d3-a456-426655440000

  -- Wikipedia

EXAMPLES
  Sample program:

      program demo_M_uuid
      ! generate 36-character UUID string
      use M_uuid, only : generate_uuid
      implicit none
      character(len=36)   :: uuid
      character(len=4096) :: filename
	 ! version 1 (time-based UUID)
	 write(*,'(a36)') generate_uuid(version=1)
	 ! version 4 (pseudo-RNG-based), default
	 write(*,'(a36)') generate_uuid(version=4)
	 ! RFC 4122 defines a UUID Uniform Resource Name (URN) namespace
	 write(*,'("urn:uuid:",a36)') generate_uuid(version=4)
	 ! a good scratch file name
	 open(file='/tmp/scratch_'//generate_uuid(),unit=10)
	 inquire(unit=10,name=filename)
	 write(*,'(*(g0))') trim(filename)
	 close(unit=10,status='delete')
      end program demo_M_uuid

  Results:

      > 7bc99c22-65ae-11ef-5143-11d1be3150ff
      > dcdb2c0f-918f-4267-79f6-1612b35ef28b
      > urn:uuid:fe86c986-31ae-4b34-4e2e-beaed6f7391b
      > /tmp/scratch_fee7cac1-5756-4195-4102-2d34fd966af9

			       February 23, 2025	       M_uuid(3m_uuid)
generate_uuid(3m_uuid)					generate_uuid(3m_uuid)

NAME
  generate_uuid(3f) - [M_uuid] generate a UUID (Universally Unique IDentifier)
  string per RFC 4122 (LICENSE:BSD-4-Clause)

SYNOPSIS
  interface:

	 function generate_uuid(version) result(uuid)
	 integer, intent(in), optional :: version
	 character(len=36)	       :: uuid

DESCRIPTION
  A universally unique identifier (UUID) is a 128-bit number used to identify
  information in computer systems. When generated according to standard
  methods UUIDs are for practical purposes unique.  generate_uuid(3f) converts
  the UUID to a standard string format per RFC 4122.

AUTHORS
  based on previous work from Alberto Garcia & Jon Wakelin, 2003-2004.	RNG
  routines from Scott Ladd <scott.ladd@coyotegulch.com>, and the libFoX
  library( Toby White <tow@uszla.me.uk>, Gen-Tao Chiang <gtc25@cam.ac.uk>,
  Andrew Walker <a.walker@ucl.ac.uk>).

OPTIONS
  version
    Indicates which standard method as described in RFC 4122 is used to
    generate the string. Versions 0,1, and 4 are supported.

    0.	Nil UUID (ie. '00000000-0000-0000-0000-000000000000')

    1.	time-based UUID

    2.	Not implemented

    3.	Not implemented

    4.	pseudo-RNG(Random Number Generator) based

    5.	Not implemented

EXAMPLES
  Sample usage:

       program demo_generate_uuid
       ! generate 36-character UUID string
       use M_uuid, only : generate_uuid
       implicit none
       character(len=36)   :: uuid
       character(len=4096) :: filename
	  !
	  ! version 1 (time-based UUID)
	  uuid=generate_uuid(version=1)
	  write(*,'(a36)')uuid
	  !
	  ! version 4 (pseudo-RNG-based), default
	  uuid=generate_uuid(version=4)
	  write(*,'(a36)')uuid
	  !
	  ! RFC 4122 defines a Uniform Resource Name (URN) namespace for UUIDs.
	  write(*,'("urn:uuid:",a36)')uuid
	  !
	  ! a good scratch file name
	  open(file='/tmp/scratch_'//uuid,unit=10)
	  inquire(unit=10,name=filename)
	  write(*,'(*(g0))') trim(filename)
	  close(unit=10,status='delete')
       end program demo_generate_uuid

  Results:

     > afa6bfb4-65a3-11ef-7251-52dbfec73ce6
     > 717b923d-c12f-4d99-6446-21b4fbed1337
     > urn:uuid:717b923d-c12f-4d99-6446-21b4fbed1337
     > /tmp/scratch_717b923d-c12f-4d99-6446-21b4fbed1337

			       February 23, 2025	generate_uuid(3m_uuid)
